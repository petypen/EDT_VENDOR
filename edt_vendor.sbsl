метод Скрипт(ВерсияПлатформы: Строка = "", Вендор: Строка = "", Продукт: Строка = "", Релиз: Строка = "",
    ПутьREPO: Строка = "",
    ПутьPROJECT: Строка = "")

    //
    если ВерсияПлатформы.Пусто() или Вендор.Пусто() или Продукт.Пусто() или Релиз.Пусто() или ПутьREPO.Пусто()
            или ПутьPROJECT.Пусто()
        Подсказка()
        возврат
    ;

    // Значения по умолчанию
    знч СлужебныйПроектEDT = "TEMP_PROJECT"
    знч ВеткаVendor = "vendor"

    // Временные файлы и каталоги скрипта
    пер ВременныйКаталог: Файл = Файлы.СоздатьВременныйКаталог("edt_vnd_", Ложь)
    пер ФайловаяИБ = "${ВременныйКаталог.Путь}\\IB"
    пер ИсходникиИБ = "${ВременныйКаталог.Путь}\\CF_SRC"
    пер СлужебныйWS = "${ВременныйКаталог.Путь}\\WS"

    // Конфигурация вендора
    пер AppData = СредаИсполнения.ПолучитьПеременную("AppData")
    пер ПутьCF: Строка = "%AppData\\1C\\1cv8\\tmplts\\%Вендор\\%Продукт\\%Релиз\\1cv8.cf"

    // Новая пустая файловая ИБ

    пер Сообщение = "\н[ИНФО] Создать новую файловую ИБ в каталоге %ФайловаяИБ\н"
    Консоль.Записать(Сообщение)

    пер Команда: Строка = "vrunner.bat"
    пер Аргументы: Массив<Строка> = ["init-dev", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы"]
    пер ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("866"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось создать новую файловую ИБ"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Создана новая файловая ИБ"
        Консоль.Записать(Сообщение)
    ;

    // Загрузить конфигурацию вендора в файловую ИБ

    Сообщение = "[ИНФО] Загрузить конфигурацию вендора в файловую ИБ\н"
    Консоль.Записать(Сообщение)

    Команда = "vrunner.bat"
    Аргументы = ["load", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "-s", "%ПутьCF"]
    ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("866"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось загрузить конфигурацию вендора в файловую ИБ"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Загружена конфигурация вендора в файловую ИБ"
        Консоль.Записать(Сообщение)
    ;

    // Снять конфигурацию вендора с поддержки

    Сообщение = "[ИНФО] Снять конфигурацию вендора с поддержки\н"
    Консоль.Записать(Сообщение)

    Команда = "vrunner.bat"
    Аргументы = ["designer", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "--additional",
        "/ManageCfgSupport -disableSupport -force"]
    ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("866"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось снять конфигурацию вендора с поддержки"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Конфигурация вендора снята с поддержки"
        Консоль.Записать(Сообщение)
    ;

    // Выгрузить конфигурацию вендора в исходники

    Сообщение = "[ИНФО] Выгрузить конфигурацию вендора в исходники\н"
    Консоль.Записать(Сообщение)

    Команда = "vrunner.bat"
    Аргументы = ["decompile", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "-o",
        "%ИсходникиИБ"]
    ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("866"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось выгрузить конфигурацию вендора в исходники"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Конфигурация вендора выгружена в исходники"
        Консоль.Записать(Сообщение)
    ;

    // Выгрузить исходники в проект EDT

    Сообщение = "[ИНФО] Выгрузить исходники вендора в проект EDT\н"
    Консоль.Записать(Сообщение)

    Команда = "ring.cmd"
    Аргументы = ["edt", "workspace", "import", "--configuration-files", "%ИсходникиИБ", "--workspace-location",
        "%СлужебныйWS", "--project-name", "%СлужебныйПроектEDT"]
    ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("CP1251"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось выгрузить исходники вендора в проект EDT"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Исходники вендора выгружены в проект EDT"
        Консоль.Записать(Сообщение)
    ;

    // Перекючение на ветку Vendor в рабочем репозитории

    Сообщение = "[ИНФО] Переключиться на ветку %ВеткаVendor в рабочем репозитории\н"
    Консоль.Записать(Сообщение)

    Команда = "git"
    Аргументы = ["-C", "%ПутьREPO", "checkout", "%ВеткаVendor"]
    ПроцессОС = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения()

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку("866"))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Сообщение = "[ОШИБ] Не удалось переключиться на ветку %ВеткаVendor"
        Консоль.Записать(Сообщение)
        возврат
    иначе
        Сообщение = "[ИНФО] Текущая ветка %ВеткаVendor"
        Консоль.Записать(Сообщение)
    ;

    // Очистка рабочего каталога SRC

    Сообщение = "[ИНФО] Очистка рабочего каталога SRC %ПутьPROJECT\\src\н"
    Консоль.Записать(Сообщение)

    пер КаталогSRC: Файл = новый Файл(ПутьPROJECT, ["src"])
    если не КаталогSRC.Существует()
        Сообщение = "[ОШИБ] Не доступен или отсутствует рабочий каталог SRC %ПутьPROJECT\\src\н"
        Консоль.Записать(Сообщение)
        возврат
    ;
    попытка
        Файлы.Удалить(КаталогSRC)
    поймать Исключение: неизвестно
        Сообщение = "[ОШИБ] Ошибка при удалении рабочего каталога SRC %ПутьPROJECT\н%{Исключение.Представление()}\н"
        Консоль.Записать(Сообщение)
        возврат
    ;

    Сообщение = "[ИНФО] Рабочий каталог SRC %ПутьPROJECT\\src очищен\н"
    Консоль.Записать(Сообщение)

    // Скопировать в рабочий каталог исходники вендора

    Сообщение = "[ИНФО] Копирование каталога с исходниками вендора в рабочий каталог\н"
    Консоль.Записать(Сообщение)

    пер КаталогSRC_Vendor: Строка = "%СлужебныйWS\\%СлужебныйПроектEDT\\src"
    попытка
        Файлы.Скопировать(КаталогSRC_Vendor, КаталогSRC)
    поймать Исключение: неизвестно
        Сообщение =
        "[ОШИБ] Ошибка при копировании исходников вендора %КаталогSRC_Vendor в рабочий каталог %КаталогSRC\н
        %{Исключение.Представление()}\н"
        Консоль.Записать(Сообщение)
        возврат
    ;

    Сообщение = "[ИНФО] Каталог с исходниками вендора скопирован в рабочий каталог\н"
    Консоль.Записать(Сообщение)
;

метод Подсказка()
    пер Подсказка: Строка =
    "EDT VENDOR 1.01
    
    Скрипт ожидает следующие аргументы, разделенные пробелом:
    1. Версия платформы 1С Предприятие, например: \"8.3.20\"
    2. Вендор поставщик конфигурации, например \"1c\". Должно совпадать с именем соответствующего каталога из дирректории дистрибутивов tmplts.
    3. Продукт - наименование продукта, например \"Accounting\". Должно совпадать с именем соответствующего каталога из дирректории дистрибутивов tmplts.
    4. Релиз - версия продукта, например \"3_0_129_19\". Должно совпадать с именем соответствующего каталога из дирректории дистрибутивов tmplts.
    5. Полный путь до каталога с репозиторием проекта (в каталоге должен быть подкаталог .git), например: \"F:\\edtws\\ACC30_WS\\ACC30_REPO\"
    6. Полный путь до каталога с проектом EDT, например: \"F:\\edtws\\ACC30_WS\\ACC30_REPO\\ACC30_PROJECT\"
    "

    Консоль.Записать(Подсказка)
;