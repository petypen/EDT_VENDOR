метод Скрипт(ВерсияПлатформы: Строка = "", Вендор: Строка = "", Продукт: Строка = "", Релиз: Строка = "",
    ПутьREPO: Строка = "",
    ПутьPROJECT: Строка = "")

    //
    если ВерсияПлатформы.Пусто() или Вендор.Пусто() или Продукт.Пусто() или Релиз.Пусто() или ПутьREPO.Пусто()
            или ПутьPROJECT.Пусто()
        Подсказка()
        возврат
    ;

    // Значения по умолчанию
    знч СлужебныйПроектEDT = "TEMP_PROJECT"
    знч ВеткаVendor = "vendor"

    // Временные каталоги
    пер ВременныйКаталог: Файл = Файлы.СоздатьВременныйКаталог("edt_vnd_", Истина)
    пер ФайловаяИБ = "${ВременныйКаталог.Путь}\\IB"
    пер ИсходникиИБ = "${ВременныйКаталог.Путь}\\CF_SRC"
    пер СлужебныйWsEDT = "${ВременныйКаталог.Путь}\\WS"

    // Конфигурация вендора
    пер AppData = СредаИсполнения.ПолучитьПеременную("AppData")
    пер ПутьCF: Строка = "%AppData\\1C\\1cv8\\tmplts\\%Вендор\\%Продукт\\%Релиз\\1cv8.cf"

    // Cоздать новую пустую файловую ИБ в каталоге %ФайловаяИБ
    пер Команда: Строка = "vrunner.bat"
    пер Аргументы: Массив<Строка> = ["init-dev", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы"]
    пер Операция: Строка = "создать новую пустую файловую ИБ в каталоге %ФайловаяИБ"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    // Загрузить новую конфигурацию вендора в файловую ИБ %ФайловаяИБ
    Команда = "vrunner.bat"
    Аргументы = ["load", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "-s", "%ПутьCF"]
    Операция = "загрузить новую конфигурацию вендора в файловую ИБ %ФайловаяИБ"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    // Снять новую конфигурацию вендора с поддержки
    Команда = "vrunner.bat"
    Аргументы = ["designer", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "--additional",
        "/ManageCfgSupport -disableSupport -force"]
    Операция = "снять новую конфигурацию вендора с поддержки"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    // Выгрузить конфигурацию вендора в исходники в каталог %ИсходникиИБ
    Команда = "vrunner.bat"
    Аргументы = ["decompile", "--ibconnection", "/F%ФайловаяИБ", "--v8version", "%ВерсияПлатформы", "-o",
        "%ИсходникиИБ"]
    Операция = "выгрузить конфигурацию вендора в исходники в каталог %ИсходникиИБ"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    // Импортировать исходники в новый проект EDT %СлужебныйПроектEDT в WS %СлужебныйWsEDT
    Команда = "ring.cmd"
    Аргументы = ["edt", "workspace", "import", "--configuration-files", "%ИсходникиИБ", "--workspace-location",
        "%СлужебныйWsEDT", "--project-name", "%СлужебныйПроектEDT"]
    Операция = "импортировать исходники в новый проект EDT %СлужебныйПроектEDT в WS %СлужебныйWsEDT"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция, "CP1251")
        возврат
    ;

    // Переключиться на ветку %ВеткаVendor в репозитории %ПутьREPO
    Команда = "git"
    Аргументы = ["-C", "%ПутьREPO", "checkout", "%ВеткаVendor"]
    Операция = "переключиться на ветку %ВеткаVendor в репозитории %ПутьREPO"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    // Очистить каталог SRC в рабочем проекте EDT %ПутьPROJECT
    пер Сообщение: Строка = "[ИНФО] Очистить каталог SRC в рабочем проекте EDT %ПутьPROJECT\н"
    Консоль.Записать(Сообщение)

    пер КаталогSRC_РабочийПроект: Файл = новый Файл(ПутьPROJECT, ["src"])
    если не КаталогSRC_РабочийПроект.Существует()
        Сообщение = "[ОШИБ] Не доступен или отсутствует каталог SRC в рабочем проекте %ПутьPROJECT\н"
        Консоль.Записать(Сообщение)
        возврат
    ;
    попытка
        Файлы.Удалить(КаталогSRC_РабочийПроект)
    поймать Исключение: неизвестно
        Сообщение = "[ОШИБ] Ошибка во время очистки каталога SRC в рабочем проекте EDT %ПутьPROJECT\н%{Исключение
            .Представление()}\н"
        Консоль.Записать(Сообщение)
        возврат
    ;

    Сообщение = "[ИНФО] Каталог SRC в рабочем проекте EDT %ПутьPROJECT очищен\н"
    Консоль.Записать(Сообщение)

    // Скопировать импортированные в EDT исходники вендора в каталог SRC рабочего проекта %ПутьPROJECT
    пер КаталогSRC_Vendor: Строка = "%СлужебныйWsEDT\\%СлужебныйПроектEDT\\src"
    Сообщение =
    "[ИНФО] Скопировать импортированные в EDT исходники вендора из каталога %КаталогSRC_Vendor
    в каталог SRC рабочего проекта %ПутьPROJECT\н"
    Консоль.Записать(Сообщение)

    попытка
        Файлы.Скопировать(КаталогSRC_Vendor, КаталогSRC_РабочийПроект)
    поймать Исключение: неизвестно
        Сообщение =
        "[ОШИБ] Ошибка при копировании исходников вендора %КаталогSRC_Vendor в каталог %КаталогSRC_РабочийПроект\н
        %{Исключение.Представление()}\н"
        Консоль.Записать(Сообщение)
        возврат
    ;

    Сообщение = "[ИНФО] Каталог с исходниками вендора скопирован в рабочий проект\н"
    Консоль.Записать(Сообщение)

    // Сделать коммит нового релиза поставщика в ветке %ВеткаVendor
    Команда = "git"
    Аргументы = ["-C", "%ПутьREPO", "add", "."]
    Операция = "добавить изменения в индекс git"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    Команда = "git"
    пер СообщениеКоммита = "v.%{Релиз.Заменить("_", ".")}, edt %ВерсияПлатформы"
    Аргументы = ["-C", "%ПутьREPO", "commit", "-m", СообщениеКоммита, "--author", "\"%{Вендор
        .ВВерхнийРегистр()} <%Вендор@%Вендор.ru>\""]
    Операция = "создать коммит %СообщениеКоммита в ветке %ВеткаVendor"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    Команда = "git"
    Аргументы = ["-C", "%ПутьREPO", "tag", "v.%{Релиз.Заменить("_", ".")}"]
    Операция = "добавить тэг v.%{Релиз.Заменить("_", ".")} в созданный коммит"
    если не ВыполнитьКоманду(Команда, Аргументы, Операция)
        возврат
    ;

    Сообщение = "[ИНФО] Скрипт успешно выполнен\н"
    Консоль.Записать(Сообщение)
;

метод ВыполнитьКоманду(Команда: Строка, Аргументы: Массив<Строка>, Операция: Строка, КодировкаСообщения: Строка =
        "866"): Булево
    пер ВыполненоУспешно: Булево = Истина

    Консоль.Записать("[ИНФО] Операция: %Операция\н")
    пер Длительность: Длительность = 60с

    пер ПроцессОС: ПроцессОс = новый ПроцессОс(Команда, Аргументы, Истина)
    ПроцессОС.Запустить()
    ПроцессОС.ОжидатьЗавершения(Длительность)

    Консоль.Записать(ПроцессОС.ПолучитьПотокВывода().ПрочитатьКакСтроку(КодировкаСообщения))
    если ПроцессОС.ПолучитьКодВозврата() != 0
        Консоль.Записать("[ОШИБ] Не удалось выполнить операцию: %Операция")
        ВыполненоУспешно = Ложь
    иначе
        Консоль.Записать("[ИНФО] Выполнена операция: %Операция")
        ВыполненоУспешно = Истина
    ;

    возврат ВыполненоУспешно
;

метод Подсказка()
    пер Подсказка: Строка =
    "EDT VENDOR 1.01
    
    Скрипт ожидает следующие аргументы, разделенные пробелом:
    1. Версия платформы 1С Предприятие, например: \"8.3.20\"
    2. Вендор - поставщик конфигурации, например \"1c\". Должно совпадать с
        \тименем соответствующего каталога из директории дистрибутивов tmplts.
    3. Продукт - наименование продукта, например \"Accounting\". Должно
        \тсовпадать с именем соответствующего каталога из директории
        \тдистрибутивов tmplts.
    4. Релиз - версия продукта, например \"3_0_129_19\". Должно совпадать
        \тс именем соответствующего каталога из директории дистрибутивов tmplts.
    5. Полный путь до каталога с репозиторием проекта (в каталоге должен быть
        \тподкаталог .git), например: \"F:\\edtws\\ACC30_WS\\ACC30_REPO\"
    6. Полный путь до каталога с проектом EDT, например: 
        \т\"F:\\edtws\\ACC30_WS\\ACC30_REPO\\ACC30_PROJECT\"
    "

    Консоль.Записать(Подсказка)
;